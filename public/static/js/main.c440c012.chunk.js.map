{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","launches","map","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","console","log","client","ApolloClient","uri","cache","InMemoryCache","App","src","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c440c012.chunk.js","sourcesContent":["import React from 'react'\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: {flight_number, mission_name, launch_date_local, launch_success} }) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{ mission_name }</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-warning\">Launch Details</Link>\n                </div>                \n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"></span> = Successful Launch\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"></span> = Failed Launch\n            </p>            \n\n        </div>\n    )\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation, Subscription } from '@apollo/client/react/components';\nimport { graphql } from '@apollo/client/react/hoc';\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\nquery LaunchesQuery {\n    launches {\n        flight_number\n        mission_name\n        launch_date_local\n        launch_success\n    }\n}\n`;\n\nexport class Launches extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">SpaceX Launches</h1>\n                <MissionKey />\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({ loading, error, data}) => {\n                            if(loading) return <h4>Loading.....</h4>\n                            if(error) return <h4>Error returned. Data could not be loaded</h4>                        \n                            return <Fragment>\n                                {\n                                    data.launches.map(launch => (\n                                        <LaunchItem key={launch.flight_number} launch={launch} />\n                                    ))\n                                }\n                            </Fragment>;\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launches\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag';\nimport { Query, Mutation, Subscription } from '@apollo/client/react/components';\nimport { graphql } from '@apollo/client/react/hoc';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\nquery LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n        flight_number\n        mission_name\n        launch_year\n        launch_success\n        launch_date_local\n        rocket {\n            rocket_id\n            rocket_name\n            rocket_type            \n        }\n    }\n}\n`;\n\n\nexport class Launch extends Component {\n    render() {\n        let { flight_number } = this.props.match.params\n        flight_number = parseInt(flight_number);\n\n\n        return (\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({ loading, error, data }) => {\n                            if(loading) return <h4>Loading...</h4>\n                            if(error) return <h4>Error returned. Data could not be loaded</h4>\n\n                            const {\n                                mission_name,                                 \n                                launch_year, \n                                launch_success, \n                                rocket:{rocket_id, rocket_name, rocket_type}\n                            } = data.launch;\n\n                            console.log(data);\n                            return (\n                                <div>\n                                    <h1 className=\"display-4 my-3\"><span className=\"text-light\">Mission: </span>{mission_name}</h1>\n                                    <h4 className=\"mb-3\">Launch Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                                        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                                        <li className=\"list-group-item\">Launch Success: <span className={classNames({\n                                            'text-success': launch_success,\n                                            'text-danger': !launch_success\n                                        })}>{launch_success ? 'Yes' : 'No'}</span></li>\n                                    </ul>\n\n                                    <h4 className=\"my-3\">Rocket Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Rocket Id: {rocket_id}</li>\n                                        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                                        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                    </ul>\n                                    <hr />\n                                    <Link to=\"/\" className=\"btn btn-warning\">Back</Link>\n                                </div>                                \n                            )\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launch\n","import React, { Component } from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nimport './App.css';\n\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n})\n\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src=\"https://www.logolynx.com/images/logolynx/98/98cc583fc70ca9b9da14fc9f848da582.png\" alt=\"\" style={{ width: 500, display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\" component={ Launches } />        \n          <Route exact path=\"/launch/:flight_number\" component={ Launch } />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}